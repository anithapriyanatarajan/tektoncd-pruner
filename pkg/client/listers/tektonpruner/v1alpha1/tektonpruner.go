/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openshift-pipelines/tektoncd-pruner/pkg/apis/tektonpruner/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TektonPrunerLister helps list TektonPruners.
// All objects returned here must be treated as read-only.
type TektonPrunerLister interface {
	// List lists all TektonPruners in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TektonPruner, err error)
	// TektonPruners returns an object that can list and get TektonPruners.
	TektonPruners(namespace string) TektonPrunerNamespaceLister
	TektonPrunerListerExpansion
}

// tektonPrunerLister implements the TektonPrunerLister interface.
type tektonPrunerLister struct {
	indexer cache.Indexer
}

// NewTektonPrunerLister returns a new TektonPrunerLister.
func NewTektonPrunerLister(indexer cache.Indexer) TektonPrunerLister {
	return &tektonPrunerLister{indexer: indexer}
}

// List lists all TektonPruners in the indexer.
func (s *tektonPrunerLister) List(selector labels.Selector) (ret []*v1alpha1.TektonPruner, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TektonPruner))
	})
	return ret, err
}

// TektonPruners returns an object that can list and get TektonPruners.
func (s *tektonPrunerLister) TektonPruners(namespace string) TektonPrunerNamespaceLister {
	return tektonPrunerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TektonPrunerNamespaceLister helps list and get TektonPruners.
// All objects returned here must be treated as read-only.
type TektonPrunerNamespaceLister interface {
	// List lists all TektonPruners in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TektonPruner, err error)
	// Get retrieves the TektonPruner from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TektonPruner, error)
	TektonPrunerNamespaceListerExpansion
}

// tektonPrunerNamespaceLister implements the TektonPrunerNamespaceLister
// interface.
type tektonPrunerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TektonPruners in the indexer for a given namespace.
func (s tektonPrunerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TektonPruner, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TektonPruner))
	})
	return ret, err
}

// Get retrieves the TektonPruner from the indexer for a given namespace and name.
func (s tektonPrunerNamespaceLister) Get(name string) (*v1alpha1.TektonPruner, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tektonpruner"), name)
	}
	return obj.(*v1alpha1.TektonPruner), nil
}
