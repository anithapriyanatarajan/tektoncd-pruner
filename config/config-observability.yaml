# Copyright 2025 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: config-observability-tekton-pruner
  namespace: tekton-pipelines
  labels:
    pruner.tekton.dev/release: "devel"
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # If non-empty, this enables queue proxy writing request logs to stdout.
    # The value determines the shape of the request logs and it must be a valid go text/template.
    # It is important to keep this as a single line. Multiple lines are parsed as separate entities
    # by most collection agents and will split the request logs into multiple records.
    #
    # The following fields and functions are available to the template:
    #
    # Request: An http.Request (see https://golang.org/pkg/net/http/#Request)
    # representing an HTTP request received by the server.
    #
    # Response:
    # struct {
    #   Code    int       // HTTP status code (see https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml)
    #   Size    int       // An int representing the size of the response.
    #   Latency float64   // A float64 representing the latency of the response in seconds.
    # }
    #
    # Revision:
    # struct {
    #   Name          string  // Knative revision name
    #   Namespace     string  // Knative revision namespace
    #   Service       string  // Knative service name
    #   Configuration string  // Knative configuration name
    #   PodName       string  // Name of the pod hosting the revision
    #   PodIP         string  // IP of the pod hosting the revision
    # }
    #
    logging.request-log-template: '{"httpRequest": {"requestMethod": "{{.Request.Method}}", "requestUrl": "{{js .Request.RequestURI}}", "requestSize": "{{.Request.ContentLength}}", "status": {{.Response.Code}}, "responseSize": "{{.Response.Size}}", "userAgent": "{{js .Request.UserAgent}}", "remoteIp": "{{js .Request.RemoteAddr}}", "serverIp": "{{.Revision.PodIP}}", "referer": "{{js .Request.Referer}}", "latency": "{{.Response.Latency}}s", "protocol": "{{.Request.Proto}}"}, "traceId": "{{index .Request.Header "X-B3-Traceid"}}"}'

    # metrics.backend-destination field specifies the system metrics destination.
    # It supports either prometheus (the default) or stackdriver.
    # Note: Using stackdriver will incur additional charges
    metrics.backend-destination: prometheus

    # metrics.request-metrics-backend-destination specifies the request metrics
    # destination. If non-empty, it enables queue proxy to send request metrics.
    # Currently supported values: prometheus, stackdriver.
    metrics.request-metrics-backend-destination: prometheus

    # metrics.stackdriver-project-id field specifies the stackdriver project ID. This
    # field is optional. When running on GCE, application default credentials will be
    # used if this field is not provided.
    metrics.stackdriver-project-id: "<your stackdriver project id>"

    # metrics.allow-stackdriver-custom-metrics indicates whether it is allowed to send metrics to
    # Stackdriver using "global" resource type and custom metric type if the
    # metrics are not supported by "knative_revision" resource type. Setting this
    # flag to "true" could cause extra Stackdriver charge.
    # If metrics.backend-destination is not Stackdriver, this is ignored.
    metrics.allow-stackdriver-custom-metrics: "false"

    ################################
    #                              #
    #  OPENTELEMETRY CONFIGURATION #
    #                              #
    ################################

    # OpenTelemetry metrics configuration
    # Enable or disable OpenTelemetry metrics collection
    otel.metrics.enabled: "true"
    
    # Metrics export interval (duration format: 30s, 1m, etc.)
    otel.metrics.interval: "30s"
    
    # Enable Prometheus format metrics export
    otel.prometheus.enabled: "true"
    
    # Enable OTLP metrics export to collectors like Jaeger, OTEL Collector
    otel.otlp.metrics.enabled: "false"
    
    # OpenTelemetry tracing configuration
    # Enable or disable OpenTelemetry tracing
    otel.tracing.enabled: "false"
    
    # Tracing sample rate (0.0 to 1.0)
    otel.tracing.sample-rate: "0.1"
    
    # Enable OTLP trace export
    otel.otlp.trace.enabled: "false"
    
    # OTLP Exporter configuration
    # OTLP endpoint for metrics and traces export
    otel.otlp.endpoint: "http://jaeger:4317"
    
    # Use insecure connection to OTLP endpoint
    otel.otlp.insecure: "true"
    
    # OTLP headers for authentication (comma-separated key=value pairs)
    # otel.otlp.headers: "authorization=Bearer token,x-custom-header=value"
    
    # OpenTelemetry resource attributes (comma-separated key=value pairs)
    otel.resource.attributes: "service.name=tektoncd-pruner,service.version=v1.0.0"
    
    # Metrics-specific configuration
    # Custom metric labels to include (comma-separated list)
    otel.metrics.labels: "namespace,resource_type,status,config_level"
    
    # Histogram bucket boundaries for duration metrics (comma-separated floats)
    otel.metrics.duration.buckets: "0.001,0.01,0.1,0.5,1.0,2.0,5.0,10.0,30.0"
    
    # Histogram bucket boundaries for age metrics (comma-separated floats in seconds)
    otel.metrics.age.buckets: "60,300,1800,3600,7200,21600,86400,604800,2592000"
